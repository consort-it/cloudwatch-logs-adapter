plugins {
    id 'org.hidetake.swagger.generator' version '2.11.0'
    id "org.sonarqube" version "2.6.2"
    id "au.com.dius.pact" version "3.2.11"
    id 'com.github.psxpaul.execfork' version '0.1.7'
}
apply plugin: 'java'
apply plugin: 'pmd'
apply plugin: 'jacoco'
//apply plugin: 'findbugs'
apply plugin: 'groovy'

group = 'com.consort'
version = '1.0-SNAPSHOT'

description = """"""

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

repositories {
    mavenCentral()
}
dependencies {
    compile group: 'com.sparkjava', name: 'spark-core', version:'2.5.5'
    compile group: 'org.slf4j', name: 'slf4j-simple', version:'1.6.1'
    compile group: 'org.slf4j', name: 'slf4j-api', version:'1.6.1'
    compile group: 'io.github.cdimascio', name: 'java-dotenv', version:'3.0.0'
    compile group: 'org.apache.commons', name: 'commons-lang3', version:'3.7'
    compile group: 'com.auth0', name: 'jwks-rsa', version:'0.3.0'
    compile group: 'org.pac4j', name: 'pac4j-core', version:'2.0.0'
    compile group: 'org.pac4j', name: 'pac4j-http', version:'2.0.0'
    compile group: 'org.pac4j', name: 'pac4j-jwt', version:'2.0.0'
    compile group: 'org.pac4j', name: 'spark-pac4j', version:'2.0.0'
    compile group: 'com.amazonaws', name: 'aws-java-sdk-core', version:'1.11.288'
    compile group: 'com.amazonaws', name: 'aws-java-sdk-cloudwatch', version:'1.11.288'
    compile group: 'com.amazonaws', name: 'aws-java-sdk-code-generator', version:'1.11.288'
    compile group: 'com.amazonaws', name: 'aws-java-sdk-logs', version:'1.11.157'
    testCompile group: 'junit', name: 'junit', version: '4.+'
    testCompile group: 'org.spockframework', name: 'spock-core', version:'1.0-groovy-2.4'
    testCompile group: 'org.codehaus.groovy', name: 'groovy-all', version:'2.4.4'
    testCompile group: 'org.objenesis', name: 'objenesis', version:'2.5.1'
    testImplementation( 'org.junit.jupiter:junit-jupiter-api:5.1.0' )
    testRuntimeOnly( 'org.junit.jupiter:junit-jupiter-engine:5.1.0' )
}

task fatJar(type: Jar) {
    manifest {
        attributes 'Implementation-Title': 'cloudwatch-logs-adapter',
                'Implementation-Version': version,
                'Main-Class': 'com.consort.CloudwatchLogsAdapterMain'
    }
    baseName = project.name + '-all'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }

    exclude 'META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA'
    with jar
}

task startDaemon(type: com.github.psxpaul.task.JavaExecFork) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'com.consort.CloudwatchLogsAdapterMain'
    args = [ '-d', '/foo/bar/data', '-v', '-l', '3' ]
    jvmArgs = [ '-Xmx500m', '-Djava.awt.headless=true' ]
    workingDir = "$buildDir/server"
    waitForPort = 8081
    waitForOutput = 'Server - Started'
}

jacocoTestReport {
    reports {
        xml.enabled true
        csv.enabled false
        html.destination file("testresult/jacoco/html")
    }
}

test {
    reports.junitXml.destination = file("build/reports/testresult/xml")
    reports.html.destination = file("build/reports/testresult/html")
    jacoco {
        append = false
        destinationFile = file("build/reports/testresult/jacoco/jacocoTest.exec")
    }
}

pact {
    serviceProviders {
        "cloudwatch-logs-adapter" {
            protocol = 'http'
            host = 'localhost'
            port = 8080
            path = '/'

            hasPactWith("cme-ui") {
                pactFile = file('src/test/resources/pacts/cme-ui-cloudwatch-logs-adapter.json')
            }
        }
    }
    reports {
      defaultReports() // adds the standard console output

//      markdown // report in markdown format
      json // report in json format
    }
}

def env = System.getenv();
def getDate() {
    def date = new Date()
    return date.format('yyyyMMddHHmmss')
}
sonarqube{
    properties {
        property "sonar.host.url", env.getOrDefault( "SONAR_HOST_URL", "https://cme.dev.k8s.consort-it.de/sonar/")
        property "sonar.login", env.getOrDefault('SONAR_HOST_TOKEN', "")
        property "sonar.projectVersion", getDate()
    }
}

swaggerSources {
    cloudwatchlogsadapter {
        inputFile = file('swagger.yaml')
    }
}

build.dependsOn(fatJar)

check.dependsOn(jacocoTestReport)
check.dependsOn(test)
check.dependsOn(validateSwagger)
//check.dependsOn(pactVerify)
project.tasks["sonarqube"].dependsOn "check"
